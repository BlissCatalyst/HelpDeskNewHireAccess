import requests
import jsonpickle
import json
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

base_url = os.getenv("BT_BASE_IP")
BT_TEMP_PASS = os.getenv("BT_TEMP_PASS")


def get_all_users(token, email):
    url = base_url + "/user"
    headers = {"Accept": "application/json",
               "Authorization": f"Bearer {token}"}
    params = {"email_address": email}

    response = requests.get(url, headers=headers, params=params)
    # print(response.json())

    return response.json()


def get_user(user_id, token):
    url = base_url + f"/user/{user_id}"
    headers = {"Accept": "application/json",
               "Authorization": f"Bearer {token}"}
    params = {"id": user_id}

    response = requests.get(url, headers=headers, params=params)
    print(response.text)

    return


def update_user():
    return


def get_vault_id(token):
    url = base_url + "/vault/account"
    headers = {"Accept": "application/json",
               "Authorization": f"Bearer {token}"}

    response = requests.get(url, headers=headers)
    print(response.text)

    return


def add_vault_user(userID, token):
    url = base_url + f"/vault/account/1/user"
    headers = {"Authorization": f"Bearer {token}",
               "Content-Type": "application/json"}
    content = {"user_id": userID,
               "role": "inject"}
    
    response = requests.post(url, headers=headers, json=content)
    print(response.text)

    return


def create_user(token, name, email):
    # Check if user already has an account.
    if get_all_users(token, email):
        print(f"A Beyond Trust account already exists for: {email}")
        return

    create_user_payload_obj = BTNewUser(name, email)
    create_user_payload_JSON = jsonpickle.encode(create_user_payload_obj)
    # Have to remove the "py/object" attribute created from jsonpickle
    create_user_payload = json.loads(create_user_payload_JSON)
    del create_user_payload["py/object"]
    create_user_payload = json.dumps(create_user_payload)

    url = base_url + "/user"
    headers = {"Authorization": f"Bearer {token}",
               "Content-Type": "application/json"}
    content = create_user_payload

    response = requests.post(url, headers=headers, data=content)

    responseJSON = response.json()
    BT_user_id = responseJSON["id"]

    add_vault_user(BT_user_id, token)

    return


class BTNewUser:
    def __init__(self, name, email):
        # id:
        # security_provider_id:
        # display_number: Autogenerated if not provided.
        # ========== username should be first part of email ==========
        emailsplit = email.split("@")
        # ========== END ==========
        self.username = emailsplit[0]
        self.password = BT_TEMP_PASS
        self.public_display_name = name
        self.private_display_name = name
        self.password_expiration = None
        self.email_address = email
        # preferred_email_language:
        # two_factor_required:
        self.enabled = True
        # last_authentication:
        # failed_logins:
        self.password_reset_next_login = True
        # created_at:
        # two_factor_enabled:
        # fido2_credential_count:
        # fido2_last_used_date:
        self.perm_admin = False
        self.perm_set_passwords = False
        self.perm_admin_pushagents = False
        self.perm_view_support_reports = "user_sessions"
        self.perm_view_presentation_reports = "user_sessions"
        self.perm_view_vault_reports = "view_user_events"
        self.perm_view_license_reports = False
        self.perm_view_syslog_reports = False
        self.perm_view_sd_recordings = False
        self.perm_edit_ambush = False
        self.perm_edit_jump_groups = False
        self.perm_edit_public_template = False
        self.perm_edit_public_file_store = False
        self.perm_edit_messages = False
        self.perm_edit_sd_teams = False
        self.perm_edit_issues = False
        self.perm_edit_skills = False
        self.perm_edit_callback_button_profiles = False
        self.perm_edit_canned_scripts = False
        self.perm_edit_custom_rep_links = False
        self.perm_edit_access_sponsors = False
        self.perm_change_display_name = False
        self.perm_change_rep_avatar = False
        self.perm_show_on_public_list = True
        self.perm_support_allowed = "full_support"
        self.perm_share_other_team = True
        self.perm_invite_external_rep = True
        self.perm_extended_availability_mode_allowed = False
        self.perm_edit_external_key = False
        self.perm_session_idle_timeout = -1
        self.perm_collaborate = True
        self.perm_collaborate_control = True
        self.perm_jump_client = True
        self.perm_local_jump = True
        self.perm_remote_jump = True
        self.perm_remote_vnc = True
        self.perm_remote_rdp = True
        self.perm_shell_jump = True
        self.default_jump_item_role_id = 9
        self.private_jump_item_role_id = 9
        self.inferior_jump_item_role_id = 1
        self.unassigned_jump_item_role_id = 9
        self.perm_generate_session_key = True
        self.perm_send_ios_profiles = True
        self.perm_accept_team_sessions = True
        self.perm_transfer_other_team = True
        self.perm_next_session_button = False
        self.perm_disable_auto_assignment = False
        self.perm_routing_idle_timeout = 900
        self.auto_assignment_max_sessions = 3
        self.perm_support_button_personal_deploy = True
        self.perm_support_button_team_manage = False
        self.perm_support_button_change_public_sites = True
        self.perm_support_button_team_deploy = True
        self.perm_local_vnc = False
        self.perm_local_rdp = True
        self.perm_vpro = True
        self.perm_console_idle_timeout = -1
        self.perm_edit_iphone_content = False
        self.perm_pd_allowed = True
        self.perm_pd_control = True
        self.perm_vault = False
